{"version":3,"file":"static/webpack/static/development/pages/index.js.62ee8dc6f8a18acdb228.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head';\nimport React, {useState, useEffect, useRef} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Comparison from '../components/comparison.js';\n\nexport default function Home() {\n    const [countList, setCountList] = useState([0]);\n    const [baseText, setBaseText] = useState('');\n    const [baseMedia, setBaseMedia] = useState('');\n    const videoElRef = useRef(null);\n    // useEffect(() => {\n\n    // },[   ])\n\n    const increaseCount = () => {\n        console.log('increaseCount')\n        countList.push(countList.length);\n        const tmpCount = JSON.parse(JSON.stringify(countList));\n        setCountList(tmpCount);\n    }\n\n    const decreaseCount = () => {\n        countList.pop();\n        const tmpCount = JSON.parse(JSON.stringify(countList));\n        setCountList(tmpCount);\n    }\n\n    const handleBaseTextFileInput =(e)=>{\n      console.log(e.target.files[0].name,e.target.files[0]);\n      const reader = new FileReader();\n        reader.onload = ()=>{\n          const text = reader.result;\n          // const node = document.getElementById('output');\n          // node.innerText = text;\n          setBaseText(text);\n          console.log(reader.result.substring(0, 200));\n        };\n        reader.readAsText(e.target.files[0]);\n    }\n\n    const handleSetBaseMedia=(e)=>{\n      const url = window.URL.createObjectURL(e.target.files[0]);\n      setBaseMedia(url)\n    }\n\n    const handleRemoveComparison = (n)=>{\n      console.log('handleRemoveComparison parent',n)\n      const tmpCount = JSON.parse(JSON.stringify(countList));\n      // const index = tmpCount.indexOf(n);\n      // if (index > -1) {\n      //   tmpCount.splice(index, 1);\n      // }\n      delete tmpCount[n];\n      setCountList(tmpCount);\n    }\n    const handleWordClick = (e)=>{\n        if(e.target.classList.contains('word')){\n           const startTime = e.target.dataset.start;\n           if(videoElRef&&videoElRef.current){\n            videoElRef.current.currentTime = startTime;\n            videoElRef.current.play();\n           }\n        }\n    }\n    return (\n        <div>\n            <Head>\n                <title>STT Benchmark</title>\n            </Head>\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <h1>STT Benchmarking</h1>\n                        {/* <p>You clicked { countList.length }  times</p> */}\n                      \n                        {/* <Form>\n                          <Form.File \n                            id=\"custom-file\"\n                            label=\"Select base text  file\"\n                            custom\n                          />\n                        </Form> */}\n                        <Form.File>\n                          <Form.File.Label>Base text file input<code>.txt</code></Form.File.Label>\n                          <Form.File.Input onChange={handleBaseTextFileInput}/>\n                        </Form.File>\n\n                        <Form.File>\n                          <Form.File.Label>Video or audio file <code>mp4</code>,<code>ogg</code>,<code>webm</code>,<code>wav</code>,<code>mp3</code></Form.File.Label>\n                          <Form.File.Input onChange={handleSetBaseMedia}/>\n                        </Form.File>\n                      \n                    </Col>\n                    <Col>\n               \n                    </Col>\n                    <Col>\n                        <video  ref={videoElRef}  className='videoPreview' src={baseMedia} style={ {  width: '100%',  height: '200px' }  }  controls></video>\n                    </Col>\n                </Row>\n\n            </Container>\n            <Container fluid>\n                <Row>\n                    <Col>\n                   { baseText &&  <Button block\n                            onClick={increaseCount}>\n                            Add a new comparison \n                        </Button>}\n                    </Col>\n                    {/* <Col>\n                        <Button block onClick={decreaseCount}>\n                            Remove One\n                        </Button>\n                    </Col> */} </Row>\n                    <Row>\n                  \n                    </Row>\n                <Row onClick={handleWordClick}> \n                {/* {baseText && <Col><h2>Base Text</h2><p>{baseText}</p></Col>} */}\n                    {baseText &&\n                    countList.map((n, index) => {\n                      if(n){\n                        return <Col key={index+n}><Comparison handleRemoveComparison={handleRemoveComparison} n={n} baseText={baseText}/></Col>\n                      }\n                })\n                } </Row>\n            </Container>\n        </div>\n    )\n}\n\n\nexport async function getStaticProps(context) {\n    return {\n        props: {}, // will be passed to the page component as props\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;;;;A","sourceRoot":""}